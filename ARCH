Nodel Architecture
==================

Basics
------
Nodel has a straightforward architecture. Objects are called
nodes. Nodes have members (key:value pairs.) Values are datatypes
(int, float, symbol), or references to other objects. Symbols are
8 character space-padded strings. Symbols are used as keys.
The runtime forms a directed graph of nodes.

Processes
---------
Process semantics are inefficient, but simple. Processes have a 'local
frame'; a node holding their local variables as key:value pairs.
Each frame has a program counter for the process. Processes can manipulate
objects referenced by their local variables, do basic arithmetic, and
node/process/IO related operations.

Calling semantics are simple; create the new function's local frame,
add your arguments, give it a program counter, give it a return frame
reference, and set it as the new local frame. When the function
completes, it can set the local frame as the return frame (passed as
an argument), and the original function can resume execution with
access to the called function's frame (with return variables.)

Datatypes
---------
Integers are 64 bit and signed. There are operations for basic boolean
arithmetic and regular arithmetic. Floating point numbers are doubles,
and there are also operations for basic manipulation. (You cannot use
boolean operations on floating point numbers.) Symbols are used as
keys in nodel, as well as readable enum-type values. They can be
converted to and from integers, (little endian), but this should not
be a significant operation. All datatypes are ordered; you can branch
on them.

Instructions
------------
Instruction data are represented as nodes as well. Each instruction is
its own node. Each instruction must have an opcode key, which holds
the symbol representing the desired operation. Each operation uses its
own arguments, but they typically have one or more symbols (syma,
symb, symc.) Instructions also have the pointer to their next
instruction, and branching instructions have multiple. Nodel programs
are prepared graphs of instruction nodes.
A list of instructions can be found in INST.



