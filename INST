Nodel instructions
==================

Nodes and slots:
new:    opcode, syma,             next, # self.syma = new node()
copy:   opcode, syma, symb,       next  # self.symb = self.syma
load:   opcode, syma, symb, symc, next  # self.symc = self.syma.symb
save:   opcode, syma, symb, symc, next  # self.symc.symb = self.syma
drop:   opcode, syma, symb,       next  # clear(self.syma.symb)
type:   opcode, syma, symb, symc, next  # self.symc = typeof(self.syma.symb) ('none, 'ref, 'sym, 'int, 'float)

count:  opcode, syma, symb,       next  # self.symb = len(self.syma)
iload:  opcode, syma, symb, symc, next  # self.symc = self.syma[self.symb]

Floating point:
fadd:   opcode, syma, symb, symc, next  # self.symc = (float) self.syma + self.symb
fsub:   opcode, syma, symb, symc, next  # self.symc = (float) self.syma - self.symb
fneg:   opcode, syma, symb,       next  # self.symb = (float) -self.syma
fmul:   opcode, syma, symb, symc, next  # self.symc = (float) self.syma * self.symb
fdiv:   opcode, syma, symb, symc, next  # self.symc = (float) self.syma / self.symb
fmod:   opcode, syma, symb, symc, next  # self.symc = (float) self.syma % self.symb
fsqrt:  opcode: syma, symb,       next  # self.symb = sqrt(self.syma)
ftoi:   opcode, syma, symb,       next  # self.symb = (int) self.syma

Integer:
and:     opcode, syma, symb, symc, next  # self.symc = self.syma & self.symb
or:      opcode, syma, symb, symc, next  # self.symc = self.syma | self.symb
xor:     opcode, syma, symb, symc, next  # self.symc = self.syma ^ self.symb
not:     opcode, syma, symb,       next  # self.symb = ~self.syma
ulshift: opcode, syma, symb, symc, next  # self.symc = (unsigned)self.syma << self.symb
urshift: opcode, syma, symb, symc, next  # self.symc = (unsigned)self.syma >> self.symb

add:    opcode, syma, symb, symc, next  # self.symc = self.syma + self.symb
sub:    opcode, syma, symb, symc, next  # self.symc = self.syma - self.symb
neg:    opcode, syma, symb,       next  # self.symb = -self.syma
mul:    opcode, syma, symb, symc, next  # self.symc = self.syma * self.symb
div:    opcode, syma, symb, symc, next  # self.symc = self.syma / self.symb
mod:    opcode, syma, symb, symc, next  # self.symc = self.syma % self.symb
lshift: opcode, syma, symb, symc, next  # self.symc = self.syma << self.symb
rshift: opcode, syma, symb, symc, next  # self.symc = self.syma >> self.symb

itof:   opcode, syma, symb,       next  # self.symb = (float) self.syma
itos:   opcode, syma, symb,       next  # self.symb = (symbol) self.syma

Symbol:
stoi:   opcode, syma, symb,       next  # self.symb = (int) self.syma

Control:
branch: opcode, syma, symb, gt, eq, lt  # Take the appropriate branch 
push:   opcode, syma              next  # push the frame, take on new PC, self.

Process:
fork:   opcode, syma, next # Create a process with self.syma as the self.
exit:   opcode             # Kill current process.
sleep:  opcode, syma, next # Sleep for self.syma milliseconds.
wait:   opcode, syma, next # Sleep until someone modifies a given node.

# Node: Different devices will have different semantics, and may require extra arguments.
IO:
excall: opcode, syma, symb, symc, next # self.symc = RPC(dest=self.syma, data=self.symb)

Debug:
print:  opcode, syma, next # Print the value in self.syma to console.
